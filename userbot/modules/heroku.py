# Neon UserBot / t.me/NeonUserBot

import codecs
import heroku3
import asyncio
import aiohttp
import math
import os
import ssl
import requests

from userbot import (
    HEROKU_APPNAME,
    HEROKU_APIKEY,
    BOTLOG,
    BOTLOG_CHATID
)

from userbot.events import register
from userbot.cmdhelp import CmdHelp

heroku_api = "https://api.heroku.com"
if HEROKU_APPNAME is not None and HEROKU_APIKEY is not None:
    Heroku = heroku3.from_key(HEROKU_APIKEY)
    app = Heroku.app(HEROKU_APPNAME)
    heroku_var = app.config()
else:
    app = None


@register(outgoing=True, pattern=r"^.(get|del) var(?: |$)(\w*)")
async def variable(var):
    exe = var.pattern_match.group(1)
    if app is None:
        await var.edit("`[HEROKU]"
                       "\n**HEROKU_APPNAME** yoxdur. @NeonSUP d…ôst…ôk qrupuna g…ôlib d…ôst…ôk alaraq qura≈üdƒ±rƒ±n.")
        return False
    if exe == "get":
        await var.edit("`Heroku M…ôlumatlar…ô g…ôtiririlir...`")
        variable = var.pattern_match.group(2)
        if variable != '':
            if variable in heroku_var:
                if BOTLOG:
                    await var.client.send_message(
                        BOTLOG_CHATID, "#CONFIGVAR\n\n"
                        "**ConfigVar**:\n"
                        f"`{variable}` = `{heroku_var[variable]}`\n"
                    )
                    await var.edit("**BOTLOG qrupuna g√∂nd…ôrildi...**")
                    return True
                else:
                    await var.edit("`Z…ôhm…ôt olmasa BOTLOG'u True olaraq t…ôyin edin...`\n`∆èg…ôr ba≈üa d√º≈üm…ôdinizs…ô` @NeonSUP `d…ôst…ôk qrupumuza g…ôlin.`")
                    return False
            else:
                await var.edit("`M…ôlumatlar yoxdu...`")
                return True
        else:
            configvars = heroku_var.to_dict()
            if BOTLOG:
                msg = ''
                for item in configvars:
                    msg += f"`{item}` = `{configvars[item]}`\n"
                await var.client.send_message(
                    BOTLOG_CHATID, "#CONFIGVARS\n\n"
                    "**ConfigVars**:\n"
                    f"{msg}"
                )
                await var.edit("`BOTLOG_CHATID alƒ±ndƒ±...`")
                return True
            else:
                await var.edit("`Z…ôhm…ôt olmasa BOTLOG'u True olaraq t…ôyin edin...`\n`∆èg…ôr ba≈üa d√º≈üm…ôdinizs…ô` @NeonSUP `d…ôst…ôk qrupumuza g…ôlin.`")
                return False
    elif exe == "del":
        await var.edit("`M…ôlumatlar silinir...`")
        variable = var.pattern_match.group(2)
        if variable == '':
            await var.edit("`Silm…ôk ist…ôdiyiniz ConfigVars'ƒ± se√ßin.`")
            return False
        if variable in heroku_var:
            if BOTLOG:
                await var.client.send_message(
                    BOTLOG_CHATID, "#DELETECONFIGVAR\n\n"
                    "**ConfigVAR Silindi**:\n"
                    f"`{variable}`"
                )
            await var.edit("`Heroku M…ôlumatlar Silindi...`")
            del heroku_var[variable]
        else:
            await var.edit("`Bel…ô M…ôlumat Yoxdu...`")
            return True


@register(outgoing=True, pattern=r'^.set var (\w*) ([\s\S]*)')
async def set_var(var):
    await var.edit("`M…ôlumatlar Hazƒ±rlanƒ±r...`")
    variable = var.pattern_match.group(1)
    value = var.pattern_match.group(2)
    if variable in heroku_var:
        if BOTLOG:
            await var.client.send_message(
                BOTLOG_CHATID, "#SETCONFIGVAR\n\n"
                "**Yeni CofigVAR D…ôyi≈üikliyi**:\n"
                f"`{variable}` = `{value}`"
            )
        await var.edit("`M…ôlumatlarƒ±nƒ±z Herokuya Yazƒ±lƒ±r...`")
    else:
        if BOTLOG:
            await var.client.send_message(
                BOTLOG_CHATID, "#CONFƒ∞GVAR\n\n"
                "**Yeni ConfigVAR**:\n"
                f"`{variable}` = `{value}`"
            )
        await var.edit("`M…ôlumatlarƒ±nƒ±z ∆èlav…ô Edildi...`")
    heroku_var[variable] = value



@register(outgoing=True, pattern=r"^\.loq")
async def _(dyno):
    try:
        Heroku = heroku3.from_key(HEROKU_APIKEY)
        app = Heroku.app(HEROKU_APPNAME)
    except BaseException:
        return await dyno.reply(
            "`Z…ôhm…ôt olmasa,Heroku VARS'da Heroku API Key v…ô Heroku APP name'in d√ºzg√ºn olduƒüundan …ômin olun.`"
        )
    await dyno.edit("`Loq g…ôtirilir....`")
    with open("logs.txt", "w") as log:
        log.write(app.get_log())
    fd = codecs.open("logs.txt", "r", encoding="utf-8")
    data = fd.read()
    key = (requests.post("https://nekobin.com/api/documents",
                         json={"content": data}) .json() .get("result") .get("key"))
    url = f"https://nekobin.com/raw/{key}"
    await dyno.edit(f"`Heroku loq'u :`\n\n: [N Œ£ O N]({url})")
    return os.remove("logs.txt")


CmdHelp('heroku').add_command(
                            'set var',
                            'Bunun say…ôsind…ô m√∂vc√ºd heroku VAR-larƒ±nƒ±zƒ± d…ôyi≈ü…ô bil…ôrsiniz.\nV…ô yaxud da yeni varlar …ôlav…ô ed…ô bil…ôrsiniz.'
                            ".set var NEON_STIK üà¥"
).add_command(
    'get var', None, 'VAR-larƒ±nƒ±za baxƒ±n. Lakin, √∂z…ôl BOTLOG qrupunuzda istifad…ô edin.'
).add_command(
    'del var', None,'M√∂vc√ºd Heroku Varlarƒ±nƒ±zƒ± bu …ômr say…ôsind…ô sil…ô bil…ôrsiniz.'
).add_command(
    'loq', None, 'Heroku loqu'
).add()
